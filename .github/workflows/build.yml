name: Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  #release:
  #  types: [published]

jobs:
  build:
    name: ${{ matrix.os }}, py-${{ matrix.python_version }}, node-${{ matrix.node_version }}
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      # sets the macOS version target, see: https://users.rust-lang.org/t/compile-rust-binary-for-older-versions-of-mac-osx/38695
      MACOSX_DEPLOYMENT_TARGET: 10.9
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest, macOS-latest]
        python_version: [3.8]
        node_version: [16]
        experimental: [false]
        #include:
        #  - os: ubuntu-latest
        #    python_version: 3.9
        #    node_version: 16
        #    experimental: true
    steps:

    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    # Needed for `git describe --tags --abbrev=0` to work (used for getting the latest version tag)
    - name: Fetch full git history
      run: git fetch --prune --unshallow --tags

    # Only build in release mode on the master branch (longer build times)
    - name: Set RELEASE
      run: |
        echo "RELEASE=${{ github.ref_name == 'master' }}" >> $GITHUB_ENV

    - name: Set up Python
      if: matrix.os != 'macOS-latest'
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python_version }}

    # Setup Python version built for older macOS (https://github.com/actions/virtual-environments/issues/1256)
    - name: Set up Python for macOS
      if: matrix.os == 'macOS-latest'
      run: |
        curl https://www.python.org/ftp/python/${PYTHON_VERSION}/python-${PYTHON_VERSION}-macosx10.9.pkg -o "python.pkg"
        sudo installer -pkg python.pkg -target /
        echo "/Library/Frameworks/Python.framework/Versions/${{ matrix.python_version }}/bin" >> $GITHUB_PATH
      env:
        # Add the patch number to the Python version (for FTP download link)
        PYTHON_VERSION: ${{ matrix.python_version }}.9

    - name: Set up Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}

    - name: Set up Rust nightly
      uses: actions-rs/toolchain@v1
      id: toolchain
      with:
        profile: minimal
        toolchain: nightly
        override: true

    - name: Get npm cache dir
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"

    - uses: actions/cache@v1
      name: Cache npm
      env:
        cache-name: node
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-

    - name: Cache cargo build
      uses: actions/cache@v1
      if: runner.os != 'macOS'  # cache doesn't seem to behave nicely on macOS, see: https://github.com/ActivityWatch/aw-server-rust/issues/180
      env:
        cache-name: cargo-build-target
      with:
        path: aw-server-rust/target
        # key needs to contain rustc_hash due to https://github.com/ActivityWatch/aw-server-rust/issues/180
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ env.cache-name }}-${{ steps.toolchain.outputs.rustc_hash }}-
    - name: Install APT dependencies
      shell: bash
      if: "startsWith(runner.os, 'linux')"
      run: |
          sudo apt-get update
          # Unsure which of these are actually necessary...
          sudo apt-get install -y \
            qt5-default \
            qtwayland5 \
            libqt5x11extras5 \
            libfontconfig1 \
            libxcb1 \
            libfontconfig1-dev \
            libfreetype6-dev \
            libx11-dev \
            libxcursor-dev \
            libxext-dev \
            libxfixes-dev \
            libxft-dev \
            libxi-dev \
            libxrandr-dev \
            libxrender-dev

    - name: Install dependencies
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          choco install innosetup
        fi
        pip3 install poetry virtualenv

    - name: Build
      shell: bash
      run: |
        python3 -m virtualenv venv
        source venv/bin/activate || source venv/Scripts/activate
        poetry install
        make build

    - name: Run tests
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test

    # Don't run integration tests on Windows, doesn't work for some reason
    - name: Run integration tests
      if: "!startsWith(runner.os, 'windows')"
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        make test-integration

    - name: Package
      shell: bash
      run: |
        source venv/bin/activate || source venv/Scripts/activate
        poetry install  # run again to ensure we have the correct version of PyInstaller
        make package

    - name: Package dmg
      if: startsWith(runner.os, 'macOS')
      run: |
        # Load certificates
        # Only load key & sign if env vars for signing exists
        if [ -n "$APPLE_EMAIL" ]; then
          ./scripts/ci/import-macos-p12.sh
        fi

        # Build .app and .dmg
        source venv/bin/activate
        make dist/ActivityWatch.dmg

        # codesign dmg
        if [ -n "$APPLE_EMAIL" ]; then
          codesign --verbose -s ${APPLE_PERSONALID} dist/ActivityWatch.dmg
        fi

        if [ -n "$APPLE_EMAIL" ]; then
          # Run prechecks
          brew install akeru-inc/tap/xcnotary
          xcnotary precheck dist/ActivityWatch.app
          xcnotary precheck dist/ActivityWatch.dmg

          # Notarize
          make dist/notarize
        fi
        mv dist/ActivityWatch.dmg dist/activitywatch-$(scripts/package/getversion.sh)-macos-x86_64.dmg
      env:
        APPLE_EMAIL: ${{ secrets.APPLE_EMAIL }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_PERSONALID: ${{ secrets.APPLE_TEAMID }} # APPLE_PERSONAL_ID == APPLE_TEAM_ID for personal accounts
        APPLE_TEAMID: ${{ secrets.APPLE_TEAMID }}
        CERTIFICATE_MACOS_P12_BASE64: ${{ secrets.CERTIFICATE_MACOS_P12_BASE64 }}
        CERTIFICATE_MACOS_P12_PASSWORD: ${{ secrets.CERTIFICATE_MACOS_P12_PASSWORD }}

    - name: Upload packages
      uses: actions/upload-artifact@v2-preview
      with:
        name: builds-${{ runner.os }}-py${{ matrix.python_version }}
        path: dist/activitywatch-*.*

